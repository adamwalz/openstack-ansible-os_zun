---
# Copyright 2018, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- import_tasks: zun_pre_flight.yml
  tags:
    - always

- import_tasks: zun_pre_install.yml
  tags:
    - zun-install

- name: Install the python venv
  include_role:
    name: "python_venv_build"
  vars:
    venv_build_constraints: "{{ zun_git_constraints }}"
    venv_install_destination_path: "{{ zun_bin | dirname }}"
    venv_install_distro_package_list: "{{ zun_distro_packages }}"
    venv_pip_install_args: "{{ zun_pip_install_args }}"
    venv_pip_packages: "{{ zun_pip_packages | union((zun_oslomsg_amqp1_enabled | bool) | ternary(zun_optional_oslomsg_amqp1_pip_packages, [])) }}"
    venv_facts_when_changed:
      - section: "zun"
        option: "venv_tag"
        value: "{{ zun_venv_tag }}"
  tags:
    - zun-install

- import_tasks: mq_setup.yml
  when:
    - "zun_services['zun-api']['group'] in group_names"
    - "inventory_hostname == ((groups[zun_services['zun-api']['group']] | intersect(ansible_play_hosts)) | list)[0]"
  vars:
    _oslomsg_rpc_setup_host: "{{ zun_oslomsg_rpc_setup_host }}"
    _oslomsg_rpc_userid: "{{ zun_oslomsg_rpc_userid }}"
    _oslomsg_rpc_password: "{{ zun_oslomsg_rpc_password }}"
    _oslomsg_rpc_vhost: "{{ zun_oslomsg_rpc_vhost }}"
    _oslomsg_rpc_transport: "{{ zun_oslomsg_rpc_transport }}"
    _oslomsg_notify_setup_host: "{{ zun_oslomsg_notify_setup_host }}"
    _oslomsg_notify_userid: "{{ zun_oslomsg_notify_userid }}"
    _oslomsg_notify_password: "{{ zun_oslomsg_notify_password }}"
    _oslomsg_notify_vhost: "{{ zun_oslomsg_notify_vhost }}"
    _oslomsg_notify_transport: "{{ zun_oslomsg_notify_transport }}"
    _oslomsg_configure_notify: "{{ (zun_ceilometer_enabled | bool) or (zun_designate_enabled | bool) }}"
  tags:
    - common-mq
    - zun-config

- import_tasks: db_setup.yml
  vars:
    _oslodb_setup_host: "{{ zun_db_setup_host }}"
    _oslodb_databases:
      - name: "{{ zun_galera_database }}"
        users:
          - username: "{{ zun_galera_user }}"
            password: "{{ zun_galera_password }}"
  when:
    - "zun_services['zun-api']['group'] in group_names"
    - "inventory_hostname == ((groups['zun_api'] | intersect(ansible_play_hosts)) | list)[0]"
  tags:
    - common-db
    - zun-config

- import_tasks: zun_service_setup.yml
  when:
    - "zun_services['zun-api']['group'] in group_names"
    - "inventory_hostname == ((groups['zun_api'] | intersect(ansible_play_hosts)) | list)[0]"
  tags:
    - zun-config

- import_tasks: zun_compute.yml
  when:
    - "zun_services['zun-compute']['group'] in group_names"
  tags:
    - zun-compute

- import_tasks: zun_post_install.yml
  tags:
    - zun-config

- name: Run the systemd service role
  include_role:
    name: systemd_service
  vars:
    systemd_user_name: "{{ zun_system_user_name }}"
    systemd_group_name: "{{ zun_system_group_name }}"
    systemd_tempd_prefix: openstack
    systemd_slice_name: zun
    systemd_lock_path: "{{ zun_lock_path }}"
    systemd_CPUAccounting: true
    systemd_BlockIOAccounting: true
    systemd_MemoryAccounting: true
    systemd_TasksAccounting: true
    systemd_services:
      - service_name: "{{ service_var.service_name }}"
        enabled: yes
        state: started
        execstarts: "{{ service_var.execstarts }}"
        execreloads: "{{ service_var.execreloads | default([]) }}"
        config_overrides: "{{ zun_service_defaults | combine(service_var.init_config_overrides) }}"
  with_items: "{{ filtered_zun_services }}"
  loop_control:
    loop_var: service_var
  tags:
    - zun-config
    - systemd-service

- name: Run the etcd service role
  import_role:
    name: etcd
  vars:
    etcd_cluster_group: "zun_api"
  when:
    - zun_services['zun-api']['group'] in group_names
  tags:
    - zun-config
